#!/bin/bash
#
# Generate C++ header file with git / build version information.
#
# Copyright 2012-2021 Herbert Thielen
#
# This file is part of the program 'koelner-phonetik',
# see https://gitlab.ai.it.hs-worms.de/swq/23s/koelner-phonetik
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

ME=${0##*/}	# basename
REPO=${0%/*}	# dirname

[ $# -eq 1 ] || \
    { echo >&2 "Usage: $ME target-file"; exit 1; }
TARGET=$1
TMPFILE=$TARGET.$$.tmp

# We can assume that this file is part of the git repository, but
# the build directory might be placed outside the git repository.
# So it's safer to call 'git describe' from the script's directory.
REPO_VERSION=$(cd "$REPO"; git describe --tags --always --long --dirty)
case "$REPO_VERSION" in
    "")	REPO_VERSION="unknown-outside-git";;
    *-dirty) echo "Note: git status is dirty due to";
	     (cd "$REPO"; git status -s)
	     ;;
esac


# if built from jenkins/hudson, BUILD_TAG is set already
if [ -z "$BUILD_TAG" ]; then
    if [ -n "$CI_PROJECT_NAME" -a -n "$CI_JOB_ID" ]; then
	# we are running in a GitLab pipeline
	BUILD_TAG="${CI_PROJECT_NAME}-${CI_JOB_ID}"
    else
	BUILD_TAG="manual build by $(id -un) on $(date +%F)"
    fi
fi

cat > "$TMPFILE" <<-EOF
	// automatically generated by $ME on $(date +%F) - do not edit
	const char * BUILDTAG = "${BUILD_TAG}";
	const char * GITVERSION = "${REPO_VERSION}";
EOF

# if nothing changed, we keep the old file
if cmp -s -- "$TARGET" "$TMPFILE"
then
    echo "nothing changed"
    rm -- "$TMPFILE"
else
    echo "new version $REPO_VERSION ($BUILD_TAG)"
    mv -- "$TMPFILE" "$TARGET"
fi
