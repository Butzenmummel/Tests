# GitLab CI configuration to build and test the helloworld application
#
# See https://gitlab.ai.it.hs-worms.de/help/ci/yaml/README.md
#
#
# Copyright 2020-2023 Herbert Thielen
#
# This file is part of the program 'koelner-phonetik',
# see https://gitlab.ai.it.hs-worms.de/swq/23s/koelner-phonetik
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

stages:
  - build
  - test

# Use the prepared cicd image of SWQ
image: ${CI_REGISTRY}/swq/swq-cicd-docker:latest

build:
  stage: build
  variables:
    # We don't want to have a "*-dirty" version in the build!
    # See https://docs.gitlab.com/ee/ci/runners/configure_runners.html#git-strategy
    # But both strategies 'fetch' and 'clone' lead to dirty environment
    # sometimes, maybe timing issue. This has to be investigated.
    GIT_STRATEGY: fetch
  script:
    - cd build && cmake -DCMAKE_VERBOSE_MAKEFILE=True .. && make -j demo-koelner-phonetik
  cache:
    paths:
      # from https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/lib/gitlab/ci/templates/C++.gitlab-ci.yml
      # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
      - "**/*.o"

  artifacts:
    # Default is 30 days. For us, a shorter period is sufficient.
    expire_in: 2 weeks
    paths:
      - build/helloworld
      - build/generated-version.h       # need this for doxygen

# run tests using the binary built before
test:
  stage: test
  variables:
    # see https://docs.gitlab.com/ee/ci/runners/configure_runners.html#git-strategy
    GIT_STRATEGY: fetch
  dependencies: []
    # default is to copy artefacts from all previous jobs; we don't need any
  script:
    - g++ --version
    - cd build && cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_VERBOSE_MAKEFILE=True .. && make -j unit-test && cd ..
    - bin/run-tests
    # see https://docs.gitlab.com/ee/user/project/merge_requests/test_coverage_visualization.html#cc-example
    # here we use *.gcov files generated by gcov called in bin/run-tests, because we didn't get gcovr to generate the coverage otherwise,
    # and therefore we have to omit --root compared to the cc-example given in gitlab doc.
    - cd build && gcovr --xml-pretty --exclude-unreachable-branches --print-summary --use-gcov-files --keep -o coverage.xml
  cache:
    # use key to distinguish objects from build job which builds no coverage info
    key: $CI_JOB_NAME
    paths:
      # from https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/lib/gitlab/ci/templates/C++.gitlab-ci.yml
      # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
      - "**/*.o"

  # Let's parse the output of lcov inside run-tests, which might be similar to:
  #                       |Lines       |Functions  |Branches
  # Filename              |Rate     Num|Rate    Num|Rate     Num
  # ============================================================
  # [/some/path/to/project/.../src/app-lib/]
  # VersionInfo.cpp       | 100%      4| 100%     2|    -      0
  # ============================================================
  #                 Total:| 100%      4| 100%     2|    -      0
  coverage: '/Total:\| *(\d+\.?\d*%)/'

  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    # Default is 30 days. For us, a shorter period is sufficient.
    expire_in: 2 weeks
    paths:
      - build/coverage-html/
    expose_as: 'coverage-html'
    # see https://docs.gitlab.com/ee/user/project/merge_requests/test_coverage_visualization.html#cc-example
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/coverage.xml

